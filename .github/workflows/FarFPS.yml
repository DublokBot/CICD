name: FarFPS - Build and Export
on:
  workflow_dispatch:
    inputs:
      reason:
        description: "The reason for running the workflow"
        required: true
        default: "Manual run"
      # sourceBranchName:
      #   description: "Source Branch name [dev-1-2, dev]"
      #   required: true
      #   default: "dev"
      targetBranchName:
        description: "Branch name [dev, main]"
        required: true
        default: "dev"
      prNumber:
        description: "Pull request number"
        required: true
        default: "0"
      commitId:
        description: "Commit Id"
        required: true
        default: "0"
env:
  PROJECT_NAME: FarFPS
  UNITY_VERSION: 2020.3.43f1
  REPO_LOCAL: repo
  REPO: DublokSoftware/FarFPS.Unity
  DISCORD_CHANNEL_ID: "1062954988990648320"
  AZURE_REPO: https://dublok@dev.azure.com/dublok/FarFPS.Unity/_git/FarFPS.Unity
jobs:
  buildForAllSupportedPlatforms:
    name: üß± Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    timeout-minutes: 180
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          #- StandaloneOSX # Build a macOS standalone (Intel 64-bit).
          #- StandaloneWindows # Build a Windows standalone.
          #- StandaloneWindows64 # Build a Windows 64-bit standalone.
          #- StandaloneLinux64 # Build a Linux 64-bit standalone.
          #- iOS # Build an iOS player.
          - Android # Build an Android .apk standalone app.
          #- WebGL # WebGL.
    steps:
      - name: "üì´ Reason: ${{ inputs.reason }}"
        run: |
          echo "Reason: ${{ inputs.reason }}"
          echo "TargetBranchName: ${{ inputs.targetBranchName }}"
          echo "PrNumber: ${{ inputs.prNumber }}"
      # - name: üì• Checkout Git Repository
      #   uses: actions/checkout@v3
      #   with:
      #     repository: ${{ env.REPO }}
      #     ref: ${{ inputs.targetBranchName }}
      #     token: ${{ secrets.PAT }}
      #     fetch-depth: 0
      #     lfs: true
      #     path: ${{ env.REPO_LOCAL }}
      - name: Checkout External Repository      
        run: |
          git clone --depth=1 --branch={{ inputs.targetBranchName }} https://${{ secrets.AZURE_GIT_AUTH }}@dev.azure.com/dublok/FarFPS.Unity/_git/FarFPS.Unity ${{ env.REPO_LOCAL }}
          cd ${{ env.REPO_LOCAL }}
          git checkout ${{ inputs.commitId }}

      - name: üì• Cache [Library]
        uses: actions/cache@v3
        if: always()
        with:
          path: ./${{ env.REPO_LOCAL }}/Library
          key: ${{ env.PROJECT_NAME }}-${{ matrix.targetPlatform }}-Library-${{ env.UNITY_VERSION }}-${{ hashFiles('./repo/Assets/**', './repo/Packages/**', './repo/ProjectSettings/**') }}
          restore-keys: ${{ env.PROJECT_NAME }}-${{ matrix.targetPlatform }}-Library-
      - name: üßÆ Commit Count
        id: commitCount
        working-directory: ./${{ env.REPO_LOCAL }}
        run: |
          commitcount=$(git rev-list HEAD --count)
          echo "COMMIT COUNT: $commitcount"
          echo "COMMIT_COUNT=$commitcount" >> $GITHUB_OUTPUT
      - name: üåÖ Semantic Version
        id: semVer
        run: |
          commitCount=${{ steps.commitCount.outputs.COMMIT_COUNT }}
          semver=$(printf %09d $commitCount | sed ':a;s/\B[0-9]\{3\}\>/.&/;ta')
          echo "SEMANTIC VERSION: " $semver
          echo "SEM_VER=$semver" >> $GITHUB_OUTPUT
      - name: üîç Commit Id
        id: commitId
        working-directory: ./${{ env.REPO_LOCAL }}
        run: |
          commitId=$(git rev-parse origin/${{ inputs.targetBranchName }})
          echo "COMMIT ID: $commitId"
          echo "COMMIT_ID=$commitId" >> $GITHUB_OUTPUT
      - name: üîç Commit Id2
        id: commitId2
        working-directory: ./${{ env.REPO_LOCAL }}
        run: |
          commitId=$(git rev-parse origin/${{ inputs.commitId }}
          echo "COMMIT ID2: $commitId"
          echo "COMMIT_ID2=$commitId" >> $GITHUB_OUTPUT
  #     - name: üßπ Free Disk Space
  #       # if: matrix.targetPlatform == 'Android'
  #       run: |
  #         sudo swapoff -a
  #         sudo rm -f /swapfile
  #         sudo apt clean
  #         docker rmi $(docker images -q)
  #         df -h
  #         # Before
  #         echo "Disk space before:"
  #         df -h
  #         #echo "Listing 100 largest packages"
  #         #dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n | tail -n 100
  #         #echo "Removing large packages"
  #         #sudo apt-get remove -y '^ghc-8.*'
  #         #sudo apt-get remove -y '^dotnet-.*'
  #         #sudo apt-get remove -y '^llvm-.*'
  #         #sudo apt-get remove -y 'php.*'
  #         #sudo apt-get remove -y azure-cli google-cloud-sdk hhvm google-chrome-stable firefox powershell mono-devel
  #         #sudo apt-get autoremove -y
  #         #sudo apt-get clean
  #         #df -h
  #         echo "Removing large directories"
  #         # https://github.com/apache/flink/blob/master/tools/azure-pipelines/free_disk_space.sh
  #         rm -rf /usr/share/dotnet/
  #         # https://github.com/actions/virtual-environments/issues/709#issuecomment-612569242
  #         rm -rf "/usr/local/share/boost"
  #         rm -rf "$AGENT_TOOLSDIRECTORY"
  #         # After
  #         echo "Disk space after:"
  #         df -h
  #     - name: ü™õ Build
  #       uses: game-ci/unity-builder@v2.1.2
  #       env:
  #         UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  #         ANDROID_VERSION_CODE: ${{ steps.commitCount.outputs.COMMIT_COUNT }}
  #       with:
  #         targetPlatform: ${{ matrix.targetPlatform }}
  #         projectPath: ./${{ env.REPO_LOCAL }}
  #         versioning: Custom
  #         version: ${{ steps.semVer.outputs.SEM_VER }}
  #         unityVersion: ${{ env.UNITY_VERSION }}
  #     - name: üìÅ Rename File [Android.apk]
  #       if: matrix.targetPlatform == 'Android'
  #       run: |
  #         sudo mkdir -p build/${{ inputs.targetBranchName }}/${{ matrix.targetPlatform }}
  #         sudo mv build/${{ matrix.targetPlatform }}/Android.apk build/${{ inputs.targetBranchName }}/${{ matrix.targetPlatform }}/${{ steps.semVer.outputs.SEM_VER }}.apk
  #         sudo rm -rf build/${{ matrix.targetPlatform }}
  #     - name: üìÅ Rename Directory [WebGL]
  #       if: matrix.targetPlatform == 'WebGL'
  #       run: |
  #         sudo mkdir -p build/${{ inputs.targetBranchName }}/${{ matrix.targetPlatform }}
  #         sudo mv build/${{ matrix.targetPlatform }}/WebGL build/${{ inputs.targetBranchName }}/${{ matrix.targetPlatform }}/${{ steps.semVer.outputs.SEM_VER }}
  #         sudo rm -rf build/${{ matrix.targetPlatform }}
  #     - name: üì§ Upload artifacts
  #       uses: actions/upload-artifact@v3.1.2
  #       with:
  #         name: build_${{ env.PROJECT_NAME }}_${{ matrix.targetPlatform }}_${{ steps.semVer.outputs.SEM_VER }}
  #         path: build/
  #         retention-days: 1
  #   outputs:
  #     sem_ver: ${{ steps.semVer.outputs.SEM_VER }}
  #     commit_id: ${{ steps.commitId.outputs.COMMIT_ID }}
  # upload:
  #   needs: buildForAllSupportedPlatforms
  #   name: üì§ Upload
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 180
  #   steps:
  #     - name: üì• (Android) Download artifacts
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: build_${{ env.PROJECT_NAME }}_Android_${{ needs.buildForAllSupportedPlatforms.outputs.sem_ver }}
  #         path: build/
  #     - name: üì• (WebGL) Download artifacts
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: build_${{ env.PROJECT_NAME }}_WebGL_${{ needs.buildForAllSupportedPlatforms.outputs.sem_ver }}
  #         path: build/
  #     - name: üì§ Transfer files via FTP
  #       uses: ercindedeoglu/ftp-transfer-action@v1
  #       with:
  #         localDir: "build/"
  #         remoteDir: "build/${{ env.PROJECT_NAME }}/"
  #         host: ${{ secrets.RELEASE_DUBLOK_FTP_HOST }}
  #         user: ${{ secrets.RELEASE_DUBLOK_FTP_USERNAME }}
  #         password: ${{ secrets.RELEASE_DUBLOK_FTP_PASSWORD }}
  # posting:
  #   needs: [buildForAllSupportedPlatforms, upload]   
  #   name: üö© Post comments and messages
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 180
  #   steps:
  #     - name: üíò Get related issues
  #       if: inputs.prNumber != '0'
  #       id: get_issues
  #       run: |
  #         sudo apt-get install -y jq
  #         response=$(curl -s -H "Authorization: token ${{ secrets.PAT }}" https://api.github.com/repos/${{ env.REPO }}/issues/${{ inputs.prNumber }}/timeline)
  #         numbers=( $(echo $response | jq -r '.[] | select(.message!=null) | .message | match("#(\\d+)").string' | grep -o '[0-9]\+')" "${{ inputs.prNumber }})
  #         numbers=($(echo "${numbers[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))
  #         echo ${numbers[@]}
  #         echo "ISSUE_NUMBERS=${numbers[@]}" >> $GITHUB_OUTPUT
  #     - name: "üì® Posting to issues"
  #       run: |
  #         numbers=(${{ steps.get_issues.outputs.ISSUE_NUMBERS }})
  #         for number in "${numbers[@]}"
  #         do
  #           curl --location --request POST "https://api.github.com/repos/${{ env.REPO }}/issues/$number/comments" \
  #           --header 'Accept: application/vnd.github+json' \
  #           --header 'Authorization: Bearer ${{ secrets.PAT }}' \
  #           --header 'X-GitHub-Api-Version: 2022-11-28' \
  #           --header 'Content-Type: application/json' \
  #           --data-raw "{\"body\":\"# üòç VERSION: ${{ needs.buildForAllSupportedPlatforms.outputs.sem_ver }}\n**Branch:** ${{ inputs.targetBranchName }}\n**Branch Version:** [${{ env.REPO }}](https://github.com/${{ env.REPO }}/tree/${{ needs.buildForAllSupportedPlatforms.outputs.commit_id }})\n**Commit Id:** ${{ needs.buildForAllSupportedPlatforms.outputs.commit_id }}\n## üöÄ Releases\n* [WebGL](https://release.dublok.com/build/FarFPS/${{ inputs.targetBranchName }}/WebGL/${{ needs.buildForAllSupportedPlatforms.outputs.sem_ver }}/)\n* [Android](https://release.dublok.com/build/FarFPS/${{ inputs.targetBranchName }}/Android/${{ needs.buildForAllSupportedPlatforms.outputs.sem_ver }}.apk)\"}"
  #         done
  #     - name: "üì® Posting to discord"
  #       run: |
  #         curl --location --request POST "https://discord.com/api/channels/${{ env.DISCORD_CHANNEL_ID}}/messages" \
  #         --header 'Accept: application/vnd.github+json' \
  #         --header 'Authorization: Bot ${{ secrets.DISCORD_DUBLOK_TOKEN }}' \
  #         --header 'X-GitHub-Api-Version: 2022-11-28' \
  #         --header 'Content-Type: application/json' \
  #         --data-raw "{\"content\":\"**üòç VERSION: ${{ needs.buildForAllSupportedPlatforms.outputs.sem_ver }}**\n**Branch:** ${{ inputs.targetBranchName }}\n**Branch Version:** https://github.com/${{ env.REPO }}/tree/${{ needs.buildForAllSupportedPlatforms.outputs.commit_id }}\n**Commit Id:** ${{ needs.buildForAllSupportedPlatforms.outputs.commit_id }}\n**üöÄ Releases:**\n* **WebGL:** https://release.dublok.com/build/FarFPS/${{ inputs.targetBranchName }}/WebGL/${{ needs.buildForAllSupportedPlatforms.outputs.sem_ver }}/\n* **Android:** https://release.dublok.com/build/FarFPS/${{ inputs.targetBranchName }}/Android/${{ needs.buildForAllSupportedPlatforms.outputs.sem_ver }}.apk\"}"
