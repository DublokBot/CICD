name: FarFPS - Build and Export
on:
  workflow_dispatch:
    inputs:
      reason:
        description: "The reason for running the workflow"
        required: true
        default: "Manual run"
      sourceBranchName:
        description: "Source Branch name [dev-1-2, dev]"
        required: true
        default: "dev"
      targetBranchName:
        description: "Branch name [dev, main]"
        required: true
        default: "dev"
      prNumber:
        description: "Pull request number"
        required: true
        default: "0"

env:
  PROJECT_NAME: FarFPS
  UNITY_VERSION: 2020.3.43f1
  REPO_LOCAL: ./repo
  REPO: DublokSoftware/FarFPS.Unity

jobs:
  buildForAllSupportedPlatforms:
    name: üß± Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    timeout-minutes: 180
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          #- StandaloneOSX # Build a macOS standalone (Intel 64-bit).
          #- StandaloneWindows # Build a Windows standalone.
          #- StandaloneWindows64 # Build a Windows 64-bit standalone.
          #- StandaloneLinux64 # Build a Linux 64-bit standalone.
          #- iOS # Build an iOS player.
          - Android # Build an Android .apk standalone app.
          - WebGL # WebGL.
    steps:
      - name: "üì´ Reason: ${{ inputs.reason }}"
        run: |
          echo "Reason: ${{ inputs.reason }}"
          echo "Target Branch: ${{ inputs.targetBranchName }}"
          echo "Source Branch: ${{ inputs.sourceBranchName }}"
          echo "PR: ${{ inputs.prNumber }}"
      - name: Get issues
        id: get_issues
        run: |
          sudo apt-get install -y jq
          response=$(curl -s -H "Authorization: token ${{ secrets.PAT }}" https://api.github.com/repos/${{ env.REPO }}/issues/${{ inputs.prNumber }}/timeline)
          numbers=( $(echo $response | jq -r '.[] | select(.message!=null) | .message | match("#(\\d+)").string' | grep -o '[0-9]\+') )
          numbers=($(echo "${numbers[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))
          echo ${numbers}
          echo "ISSUE_NUMBERS=$numbers[@]" >> $GITHUB_OUTPUT
      - name: Write issues
        id: write_issues
        run: |
          echo ${{ steps.get_issues.outputs.ISSUE_NUMBERS[@] }}

      # - name: üì• Checkout Git Repository
      #   uses: actions/checkout@v3
      #   with:
      #     repository: ${{ env.REPO }}
      #     ref: ${{ inputs.targetBranchName }}
      #     token: ${{ secrets.PAT }}
      #     fetch-depth: 0
      #     lfs: true
      #     path: ${{ env.REPO_LOCAL }}
      # - name: üßÆ Commit Count
      #   id: commitCount
      #   working-directory: ${{ env.REPO_LOCAL }}
      #   run: |
      #     commitcount=$(git rev-list HEAD --count)
      #     echo "COMMIT COUNT: $commitcount"
      #     echo "COMMIT_COUNT=$commitcount" >> $GITHUB_OUTPUT
      # - name: üåÖ Semantic Version
      #   id: semVer
      #   run: |
      #     commitCount=${{ steps.commitCount.outputs.COMMIT_COUNT }}
      #     semver=$(printf %09d $commitCount | sed ':a;s/\B[0-9]\{3\}\>/.&/;ta')
      #     echo "SEMANTIC VERSION: " $semver
      #     echo "SEM_VER=$semver" >> $GITHUB_OUTPUT
      # - name: üì• Cache [Library]
      #   uses: actions/cache@v3
      #   if: always()
      #   with:
      #     path: ${{ env.REPO_LOCAL }}/Library
      #     key: ${{ env.PROJECT_NAME }}-${{ matrix.targetPlatform }}-Library-${{ env.UNITY_VERSION }}-${{ hashFiles('./repo/Assets/**', './repo/Packages/**', './repo/ProjectSettings/**') }}
      #     restore-keys: ${{ env.PROJECT_NAME }}-${{ matrix.targetPlatform }}-Library-
      # - name: ü™õ Build
      #   uses: game-ci/unity-builder@v2.1.2
      #   env:
      #     UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
      #     ANDROID_VERSION_CODE: ${{ steps.commitCount.outputs.COMMIT_COUNT }}
      #   with:
      #     targetPlatform: ${{ matrix.targetPlatform }}
      #     projectPath: ${{ env.REPO_LOCAL }}
      #     versioning: Custom
      #     version: ${{ steps.semVer.outputs.SEM_VER }}
      #     unityVersion: ${{ env.UNITY_VERSION }}
      # # - uses: actions/upload-artifact@v3
      # #   with:
      # #     name: ${{ env.PROJECT_NAME }}-Build-${{ env.UNITY_VERSION }}-${{ matrix.targetPlatform }}
      # #     path: build/${{ matrix.targetPlatform }}
      # #     retention-days: 1
      # - name: üìÅ Rename File [Android.apk]
      #   if: matrix.targetPlatform == 'Android'
      #   run: |
      #     sudo mkdir -p build/${{ inputs.targetBranchName }}/${{ matrix.targetPlatform }}
      #     sudo mv build/${{ matrix.targetPlatform }}/Android.apk build/${{ inputs.targetBranchName }}/${{ matrix.targetPlatform }}/${{ steps.semVer.outputs.SEM_VER }}.apk
      #     sudo rm -rf build/${{ matrix.targetPlatform }}
      # - name: üìÅ Rename Directory [WebGL]
      #   if: matrix.targetPlatform == 'WebGL'
      #   run: |
      #     sudo mkdir -p build/${{ inputs.targetBranchName }}/${{ matrix.targetPlatform }}
      #     sudo mv build/${{ matrix.targetPlatform }}/WebGL build/${{ inputs.targetBranchName }}/${{ matrix.targetPlatform }}/${{ steps.semVer.outputs.SEM_VER }}
      #     sudo rm -rf build/${{ matrix.targetPlatform }}          
      # - name: üì§ Transfer files via FTP
      #   uses: ercindedeoglu/ftp-transfer-action@v1
      #   with:
      #     localDir: "build/"
      #     remoteDir: "build/${{ env.PROJECT_NAME }}/"
      #     host: ${{ secrets.RELEASE_DUBLOK_FTP_HOST }}
      #     user: ${{ secrets.RELEASE_DUBLOK_FTP_USERNAME }}
      #     password: ${{ secrets.RELEASE_DUBLOK_FTP_PASSWORD }}
  # postCommentToPR:
  #   needs: buildForAllSupportedPlatforms   
  #   if: inputs.prNumber != '0'
  #   name: üö© Post comment for ${{ inputs.prNumber }}
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 180
  #   steps:
  #     - name: "üì® Posting"
  #       run: |
  #         curl --location --request POST 'https://api.github.com/repos/${{ env.REPO }}/pulls/${{ inputs.prNumber }}/reviews' \
  #         --header 'Accept: application/vnd.github+json' \
  #         --header 'Authorization: Bearer ${{ secrets.PAT }}' \
  #         --header 'X-GitHub-Api-Version: 2022-11-28' \
  #         --header 'Content-Type: application/json' \
  #         --data-raw '{"body":"Some Test Comments"}'


# - name: Extract message field
#   run: |
#     apt-get update && apt-get install jq -y
#     echo "${{ steps.get_issues.outputs.data }}" | jq '.message'

